#version 330 core

// Dados de vértice de entrada, diferentes para todas as execuções desse shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexColor;

// Dados de saída; serão interpolados para cada fragmento.
out vec3 fragmentColor;
// Valores que permanecem constantes em toda a malha.
uniform mat4 MVP;

void main(){	

	// Posição de saída do vértice, no espaço de recorte: MVP * posição
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

	// A cor de cada vértice será interpolada 
	// para produzir a cor de cada fragmento
	fragmentColor = vertexColor;
}

